{"version":3,"sources":["components/square.js","util.js","components/board.js","components/root.jsx","index.js"],"names":["Square","props","className","onClick","color","calculateWinningLine","squares","winner","allLines","i","length","findWinningLines","lines","line","firstPos","every","position","Board","state","Array","fill","redIsNext","handleReset","bind","this","slice","positionNextRow","winningLine","setState","handleClick","status","renderSquare","React","Component","Root","document","addEventListener","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.73ab1b73.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {\n  return (\n    <button \n      className=\"square\" \n      onClick={props.onClick}\n    >\n      {/* {props.position}\n      {\" \"} */}\n      {/* <span className={`${props.color}`}>{props.value}</span> */}\n      <span className={`${props.color}`}></span>\n    </button>\n  );\n};\n\nexport default Square;","// HELPER FUNCTIONS\n\n// Named Export- good for exporting multiple functions per file\n// Need to use curlys { } when importing. ex: import { calcualteWinner } from...\nexport const calculateWinningLine = (squares) => {\n  // squares ==\n  // [\n  //   null, null, null, null, null, null, null,\n  //   null, null, null, null, null, null, null,\n  //   null, null, null, null, null, null, null,\n  //   null, null, null, null, null, null, null,\n  //   null, null, null, null, null, null, null,\n  //   null, null, null, null, null, null, null\n  // ]\n\n  // [\n  //   0,  1,  2,  3,  4,  5,  6,\n  //   7,  8,  9,  10, 11, 12, 13,\n  //   14, 15, 16, 17, 18, 19, 20,\n  //   21, 22, 23, 24, 25, 26 ,27,\n  //   28, 29, 30, 31, 32, 33, 34,\n  //   35, 36, 37, 38, 39, 40, 41\n  // ]\n\n  // find all possible winning moves\n  const winningRows = [ \n    [0,  1,  2,  3],  [1,  2,  3,  4],  [2,  3,  4,  5],  [3,  4,  5,  6],\n    [7,  8,  9,  10], [8,  9,  10, 11], [9,  10, 11, 12], [10, 11, 12, 13],\n    [14, 15, 16, 17], [15, 16, 17, 18], [16, 17, 18, 19], [17, 18, 19, 20],\n    [21, 22, 23, 24], [22, 23, 24, 25], [23, 24, 25, 26], [24, 25, 26, 27],\n    [28, 29, 30, 31], [29, 30, 31, 32], [30, 31, 32, 33], [31, 32, 33, 34],\n    [35, 36, 37, 38], [36, 37, 38, 39], [37, 38, 39, 40], [38, 39, 40, 41]\n  ];\n\n  const winningCols = [\n    [0, 7,  14, 21], [7,  14, 21, 28], [14, 21, 28, 35],\n    [1, 8,  15, 22], [8,  15, 22, 29], [15, 22, 29, 36],\n    [2, 9,  16, 23], [9,  16, 23, 30], [16, 23, 30, 37],\n    [3, 10, 17, 24], [10, 17, 24, 31], [17, 24, 31, 38],\n    [4, 11, 18, 25], [11, 18, 25, 32], [18, 25, 32, 39],\n    [5, 12, 19, 26], [12, 19, 26, 33], [19, 26, 33, 40],\n    [6, 13, 20, 27], [13, 20, 27, 34], [20, 27, 34, 41]\n  ];\n\n  const winningLeftDiags = [\n    [14, 22, 30, 38], \n    [7,  15, 23, 31], [15, 23, 31, 39],\n    [0,  8,  16, 24], [8, 16, 24, 32], [16, 24, 32, 40],\n    [1,  9,  17, 25], [9, 17, 25, 33], [17, 25, 33, 41],\n    [2,  10, 18, 26], [ 10, 18, 26, 34],\n    [3,  11, 19, 27]\n  ];\n\n  const winningRightDiags = [\n    [21, 15, 9,  3],\n    [28, 22, 16, 10], [22, 16, 10, 4],\n    [35, 29, 23, 17], [29, 23, 17, 11], [23, 17, 11, 5],\n    [36, 30, 24, 18], [30, 24, 18, 12], [24, 18, 12, 6],\n    [37, 31, 25, 19], [31, 25, 19, 13], \n    [38, 32, 26, 20]\n  ];\n\n  // loop through them and see if any one board have all same values\n  const allLines = [winningRows, winningCols, winningLeftDiags, winningRightDiags];\n  let winner;\n  for (let i = 0; i < allLines.length; i++) {\n    let lines = allLines[i];    // 2D array ex. winningRows\n    // debugger\n    winner = findWinningLines(lines, squares);\n\n    if (winner) {\n      return winner;\n    }\n  }\n  \n  return null;\n};\n\n\n\n// Takes in 2D array of moves, returns array of winning moves (if any)\n// returns null if no winning moves\n// ex. lines == winningRightDiags\nfunction findWinningLines(lines, squares) {\n  // Loop through each line in moves 2D aray\n  for (let i = 0; i < lines.length; i++) {\n    // debugger\n    let line = lines[i];\n    // ex. line = [21, 15, 9, 3]\n\n    const firstPos = line[0];\n    // firstPostion = 21\n\n    // If all values in squares array at line position are the same (and not null)\n    if (line.every((position) => {\n      return ((squares[position] === squares[firstPos]) && squares[firstPos] != null);\n    })) {\n      return line;\n    }\n  }\n}\n","import React from 'react';\nimport Square from './square';\nimport { calculateWinningLine } from '../util';\n\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      squares: Array(42).fill(null),\n      redIsNext: true,\n      winner: null,\n    };\n    // squares ==\n    // [\n    //   null, null, null, null, null, null, null,\n    //   null, null, null, null, null, null, null,\n    //   null, null, null, null, null, null, null,\n    //   null, null, null, null, null, null, null,\n    //   null, null, null, null, null, null, null,\n    //   null, null, null, null, null, null, null,\n    // ]\n\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n\n  // ex. i = 13\n  handleClick(i) {\n    // Make copy of squares state\n    const squares = this.state.squares.slice();\n\n    let positionNextRow = i + 7;\n    // positionNextRow = 13 + 7 = 20\n \n    const winningLine = calculateWinningLine(squares);\n    let winner;\n    (winningLine != null) ? winner = squares[winningLine[0]] : winner = null;\n    \n    // Only \"drop\" item if current value in squares array is null\n    if (squares[i] === null && winner == null) {\n  \n      // Determine where in the squares array we want to \"drop\" the X/O\n      // Keep doing down a row until we hit a piece OR off the board\n      while (squares[positionNextRow] === null) {\n        positionNextRow += 7;\n      }\n      \n      // Place X or O in squares array\n      squares[positionNextRow - 7] = this.state.redIsNext ? 'red' : 'blue';\n      \n      // Changing state -> update board with piece\n      this.setState({\n        squares: squares,\n        redIsNext: !this.state.redIsNext,\n      });\n    }\n  }\n\n\n  handleReset() {\n    this.setState({\n      squares: Array(42).fill(null),\n      redIsNext: true,\n      winner: null,\n    });\n  }\n\n\n  renderSquare(i) {\n    return (\n      <Square \n        // value={this.state.squares[i]}\n        position={i}\n        color={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}   // !! called method style so this is captured (no need to bind)\n      />\n    ); \n  }\n\n\n  render() {\n    const { squares, redIsNext } = this.state;\n\n    const winner = calculateWinningLine(squares);\n    let status;\n\n    if (winner) {\n      status = 'Congrats! Winner: ' + squares[winner[0]];\n    } else {\n      status = 'Next player: ' + (redIsNext ? 'red' : 'blue');\n    }\n\n    // REFACTOR LATER\n    // let col = [0, 1, 2, 3, 4, 5, 6];\n    // let cols = col.map( (i) => {\n    //   return this.renderSquare(i);\n    // });\n\n    // let row = [0, 1, 2, 3, 4, 5];\n    // let rows = row.map((i) => {\n    //   return <div className=\"board-row\">{cols}</div>;\n    // });\n\n    // // rows = 6\n    // for (let i = 0; i < 6; i++) {\n    //   for (let j = 0; j < 7; j++) {\n    //   }\n    // }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(14)}\n          {this.renderSquare(15)}\n          {this.renderSquare(16)}\n          {this.renderSquare(17)}\n          {this.renderSquare(18)}\n          {this.renderSquare(19)}\n          {this.renderSquare(20)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(21)}\n          {this.renderSquare(22)}\n          {this.renderSquare(23)}\n          {this.renderSquare(24)}\n          {this.renderSquare(25)}\n          {this.renderSquare(26)}\n          {this.renderSquare(27)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(28)}\n          {this.renderSquare(29)}\n          {this.renderSquare(30)}\n          {this.renderSquare(31)}\n          {this.renderSquare(32)}\n          {this.renderSquare(33)}\n          {this.renderSquare(34)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(35)}\n          {this.renderSquare(36)}\n          {this.renderSquare(37)}\n          {this.renderSquare(38)}\n          {this.renderSquare(39)}\n          {this.renderSquare(40)}\n          {this.renderSquare(41)}\n        </div>\n\n        <button \n          onClick={this.handleReset}\n          className=\"reset-button\"\n        >RESET</button>\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './board';\n\n// Functional Component\nconst Root = () => {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n      \n      <div className=\"game-info\">\n        <div>{/* status */}</div>\n        <ol>{/* TODO */}</ol>\n      </div>\n    </div>\n  );\n};\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/root';\nimport './index.css';\n \n// ENTRY FILE\n// Wait for DOM to load, then load root component\ndocument.addEventListener('DOMContentLoaded', ()=> {\n  // grab root element\n  const root = document.getElementById('root');\n\n  // Load root component in place of root element\n  ReactDOM.render(<Root/>, root);\n});\n\n\n// TO DO:\n// - alert user who won/draw\n// - Refactor board.js to reduce number of calls to helper function calcWinningLines\n// - Highlight whole column on mouse over\n// - Highlight winning 4 lines\n// - Refactor component to generate board- don't make it manually\n// - AI\n\n\n// FINISHED\n// - Make pieces colors instead of X's or O's\n// - Determine winner\n// - Reset Button"],"sourceRoot":""}